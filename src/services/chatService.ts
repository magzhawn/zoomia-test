import type { Message } from "../types"

const API_KEY = import.meta.env.VITE_OPENAI_API_KEY

const PREPROMPT_MESSAGE: Message = {
  role: 'system',
  content: '–¢—ã —Å–ø–µ—Ü –ø–æ –º–∞—à–∏–Ω–∞–º, –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ —É–∫–∞–∂–∏ —á—Ç–æ —Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö',
  timestamp: new Date()
}

export const sendMessageToAI = async (messages: Message[]): Promise<Message> => {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [PREPROMPT_MESSAGE, ...messages],
      }),
    })

    const data = await response.json()
    console.log(data)

    if (data.choices && data.choices.length > 0) {
      return {
        content: data.choices[0].message.content,
        timestamp: new Date(),
        role: 'assistant'
      }
    } else {
      throw new Error('–ò–ò –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç...')
    }
  } catch (error) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API üôÇ‚Äç‚ÜïÔ∏è')
  }
}